*gruvbox.nvim.txt*      For Neovim >= 0.8.0     Last change: 2025 September 16

==============================================================================
Table of Contents                             *gruvbox.nvim-table-of-contents*

1. Prerequisites                                  |gruvbox.nvim-prerequisites|
2. Installing                                        |gruvbox.nvim-installing|
  - Using packer                        |gruvbox.nvim-installing-using-packer|
  - Using lazy.nvim                  |gruvbox.nvim-installing-using-lazy.nvim|
  - Using vim-plug                    |gruvbox.nvim-installing-using-vim-plug|
3. Basic Usage                                      |gruvbox.nvim-basic-usage|
4. Configuration                                  |gruvbox.nvim-configuration|
  - Overriding                         |gruvbox.nvim-configuration-overriding|
5. Lualine Support                              |gruvbox.nvim-lualine-support|
  - Usage                                 |gruvbox.nvim-lualine-support-usage|
  - Features                           |gruvbox.nvim-lualine-support-features|
6. Bufferline Support                        |gruvbox.nvim-bufferline-support|
  - Usage                              |gruvbox.nvim-bufferline-support-usage|
>
      <h1> <img src="https://i.postimg.cc/WpQzgxVh/plugin-Icon.png" width="80px"><br/>gruvbox.nvim</h1>
     </div>
<


A port of gruvbox community <https://github.com/gruvbox-community/gruvbox>
theme to lua with treesitter
<https://github.com/nvim-treesitter/nvim-treesitter> and |semantic highlights|
support!


==============================================================================
1. Prerequisites                                  *gruvbox.nvim-prerequisites*

Neovim 0.8.0+


==============================================================================
2. Installing                                        *gruvbox.nvim-installing*


USING PACKER                            *gruvbox.nvim-installing-using-packer*

>lua
    use { "ellisonleao/gruvbox.nvim" }
<


USING LAZY.NVIM                      *gruvbox.nvim-installing-using-lazy.nvim*

>lua
    { "ellisonleao/gruvbox.nvim", priority = 1000 , config = true, opts = ...}
<


USING VIM-PLUG                        *gruvbox.nvim-installing-using-vim-plug*

>vim
    Plug 'ellisonleao/gruvbox.nvim'
<


==============================================================================
3. Basic Usage                                      *gruvbox.nvim-basic-usage*

Inside `init.vim`

>vim
    set background=dark " or light if you want light mode
    colorscheme gruvbox
<

Inside `init.lua`

>lua
    vim.o.background = "dark" -- or "light" for light mode
    vim.cmd([[colorscheme gruvbox]])
<


==============================================================================
4. Configuration                                  *gruvbox.nvim-configuration*

Additional settings for gruvbox are:

>lua
    -- Default options:
    require("gruvbox").setup({
      terminal_colors = true, -- add neovim terminal colors
      undercurl = true,
      underline = true,
      bold = true,
      italic = {
        strings = true,
        emphasis = true,
        comments = true,
        operators = false,
        folds = true,
      },
      strikethrough = true,
      invert_selection = false,
      invert_signs = false,
      invert_tabline = false,
      inverse = true, -- invert background for search, diffs, statuslines and errors
      contrast = "", -- can be "hard", "soft" or empty string
      palette_overrides = {},
      overrides = {},
      dim_inactive = false,
      transparent_mode = false,
    })
    vim.cmd("colorscheme gruvbox")
<

**VERY IMPORTANT**Make sure to call setup() **BEFORE** calling the colorscheme
command, to use your custom configs


OVERRIDING                             *gruvbox.nvim-configuration-overriding*


PALETTE ~

You can specify your own palette colors. For example:

>lua
    require("gruvbox").setup({
        palette_overrides = {
            bright_green = "#990000",
        }
    })
    vim.cmd("colorscheme gruvbox")
<


HIGHLIGHT GROUPS ~

If you don’t enjoy the current color for a specific highlight group, now you
can just override it in the setup. For example:

>lua
    require("gruvbox").setup({
        overrides = {
            SignColumn = {bg = "#ff9900"}
        }
    })
    vim.cmd("colorscheme gruvbox")
<

It also works with treesitter groups and lsp semantic highlight tokens

>lua
    require("gruvbox").setup({
        overrides = {
            ["@lsp.type.method"] = { bg = "#ff9900" },
            ["@comment.lua"] = { bg = "#000000" },
        }
    })
    vim.cmd("colorscheme gruvbox")
<

Please note that the override values must follow the attributes from the
highlight group map, such as:

- **fg** - foreground color
- **bg** - background color
- **bold** - true or false for bold font
- **italic** - true or false for italic font

Other values can be seen in |`synIDattr`|


==============================================================================
5. Lualine Support                              *gruvbox.nvim-lualine-support*

Gruvbox.nvim includes built-in support for lualine.nvim
<https://github.com/nvim-lualine/lualine.nvim> status line plugin.


USAGE                                     *gruvbox.nvim-lualine-support-usage*


METHOD 1: TRADITIONAL API (BACKWARD COMPATIBLE) ~

>lua
    require('lualine').setup {
      options = {
        theme = require('gruvbox').lualine() -- dark | light | nil
        -- ... other lualine options
      }
    }
<


METHOD 2: INTEGRATIONS MODULE (RECOMMENDED) ~

>lua
    require('lualine').setup {
      options = {
        theme = require('gruvbox.integrations.lualine').get() -- dark | light | nil
        -- ... other lualine options
      }
    }
<


DYNAMIC INTEGRATION MANAGEMENT ~

>lua
    local integrations = require('gruvbox.integrations')
    
    -- List all available integrations
    print(vim.inspect(integrations.list())) -- { "lualine" }
    
    -- Get integration dynamically
    local lualine_theme = integrations.get('lualine').get()
    
    require('lualine').setup {
      options = {
        theme = lualine_theme
        -- ... other lualine options
      }
    }
<

The theme automatically adapts to your `background` setting (dark/light) and
respects gruvbox configuration options.


FEATURES                               *gruvbox.nvim-lualine-support-features*

- **Auto-detection**Automatically selects dark or light variant based on `vim.o.background`
- **Mode-aware colors**Different colors for each Vim mode (normal, insert, visual, replace, command, inactive)
- **Consistent styling**Uses the same color palette as your gruvbox theme
- **Full compatibility**Works with all gruvbox configuration options


==============================================================================
6. Bufferline Support                        *gruvbox.nvim-bufferline-support*

Gruvbox.nvim includes built-in support for bufferline.nvim
<https://github.com/akinsho/bufferline.nvim> buffer line plugin.


USAGE                                  *gruvbox.nvim-bufferline-support-usage*

>lua
    require('bufferline').setup {
      highlights = require('gruvbox.integrations.bufferline').get(),
      -- ... other bufferline options
    }
<

The bufferline integration provides:

- **Consistent theming**Matches your gruvbox color scheme
- **Transparent mode support**Respects the `transparent_mode` setting
- **Full diagnostic support**Proper coloring for error, warning, info, and hint indicators
- **Buffer state indicators**Clear visual distinction between active, visible, and background buffers
- **Customizable styling**Respects gruvbox’s bold and other style options

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
